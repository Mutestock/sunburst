name: 'Run integration tests'

on:
  push:
    branches:
      - main

jobs:
  run_interation_tests:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10' 
      - uses: isbang/compose-action@v1.4.1
        with:
          compose-file: "docker-compose.yml"
      - name: Add poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: "1.3.2"
      - name: Build python proto implementation package
        working-directory: ./commons/py/proto_implementations
        run: | 
          poetry build
      - name: Run tests
        working-directory: ./integration_tests
        # This is quite a non-solution to a hashing problem.
        # We don't want to upload the package to github.
        # So we have to build it in the pipeline for testing
        # But building the package means it will have a different hash than the one exported by poetry
        # Removing the package and readding it auto-assigns the new hash to the lock
        # Which is then exported and installed.
        # The real solution is probably to upload the package to the releases page on github
        # And set the package dependency to a github repo in the pyproject.toml file.
        # This does complicate things further, though.
        run: |
          poetry remove proto-implementations
          poetry add ../commons/py/proto_implementations/dist/proto_implementations-0.1.4.tar.gz
          poetry export > requirements.txt
          pip install -r requirements.txt
          chmod +x ./run_tests.sh
          ./run_tests.sh
